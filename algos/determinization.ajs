from epsElimination import epsElim

function eclose(trans, q, res, visited)
    if not res then
        res := {}
    end if

    if not visited then
        visited := {}
    end if

    res.add(q)

    let toVisit := res \ visited
    visited := visited U toVisit

    foreach p in toVisit do
        res.unionInPlace(trans(p, epsilon))
        eclose(trans, p, res, visited)
    done

    return res
end function

function ECLOSE(trans, Q)
    let res := {}
    foreach q in Q do
        res.unionInPlace(eclose(trans, q))
    done
    return res
end function

function addDetermnizedTransitions(A, trans, newA, q, visited)
    if not visited then
        visited := {}
    else if q belongs to visited then
        return
    end if

    visited.add(q)

    if (q inter A.getAcceptingStates() is not empty) then
        newA.setAcceptingState(q)
    end if

    foreach a in A.getAlphabet() do
        let dest := {}

        foreach p in q do
            dest.unionInPlace(trans(p, a))
        done

        let qdest := ECLOSE(trans, dest)

        newA.addTransition(q, a, qdest)
        addDetermnizedTransitions(A, trans, newA, qdest, visited)
    done
end function

export function determinize(A)
    let trans    := A.getTransitionFunction()

    let newA := new Automaton
    let qd := eclose(trans, A.getInitialState())
    newA.setInitialState(qd)
    addDetermnizedTransitions(A, trans, newA, qd)
    return newA
end function

export function isDeterminized(A)
   let trans    := A.getTransitionFunction()
   let Alphabet := A.getAlphabet()

   foreach state in trans() do
      # epsilon transition:
      if trans(state, epsilon) is not empty then
         return false
      end if

      foreach symbol in trans(state) do
         if trans(state, symbol).card() > 1 then
            return false
         end if
      done
   done

   return true
end function

run(
    function ()
        let A := get_automaton(currentAutomaton)

        if isDeterminized(A) then
            return A
        end if
        return determinize(A)
    end function
)
