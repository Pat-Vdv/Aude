// transformation of a mealy machine to an equivalent moore machine
// algorithm : source https://www.tutorialspoint.com/automata_theory/moore_and_mealy_machines.htm
/*
Algorithm 5

Input − Mealy Machine

Output − Moore Machine

Step 1 − Calculate the number of different outputs for each state (Qi) that are available in the state table of the Mealy machine.

Step 2 − If all the outputs of Qi are same, copy state Qi. If it has n distinct outputs, break Qi into n states as Qin where n = 0, 1, 2.......

Step 3 − If the output of the initial state is 1, insert a new initial state at the beginning which gives 0 output.
*/



// ALGORITHM
/*
parcours de la liste des etats:
    pour chaque etat e faire
        pour chaque entree x faire
            etat_suivant := transition (etat, entree)
            sortie := output (etat, entree)
            couple(etat_suivant, sortie) <- construire tous les couples possibles commme ça
        fin pour
    fin pour

    pour chaque etat e faire
        deduire de l'ensemble des couples tous les sorties possibles pour e
        construire les nouveaux etats
        et leur associer les sorties correspondantes qu'on a deduit
    fin pour

    //reste a faire les nouveaux transitions

    pour chaque etat de moore (t1, o1) faire
        pour chaque entree a faire
            determiner transition (t1, a, t2) et sortie (t1, a, o2)
            trouver l'etat de moore (t2, o2) et lui associer a à partir de t1 <- nouveau transition
            ajouter ce nouveau transition dans l'ensemble des nouveaux transitions
        fin pour
    fin pour
*/
// initial_output is the output of the initial state
// since it depends on the mealy machine, it is to be determined each time
// initial_output is an element of input_alphabet
export function mealy2moore ( mealy, initial_output)

     let M := new Moore()

     M.input_alphabet := mealy.input_alphabet
     M.output_alphabet := mealy.output_alphabet
     M.initial_state := [mealy.initial_state,initial_output].toString()
     M.states := new Set()
     M.transition := new Map()
     M.output := new Map()
    // a set containing all the [next_state,output] couples
    // that we've deduced from the Mealy machine
    // they represent the new Moore machine states
    let ns_o_set := new Set()

    foreach s in mealy.states do
        foreach a in mealy.input_alphabet do
            var ns_o := mealy.next(s,a) // next() returns an array: [next_state, output]
            ns_o_set.add(ns_o)
            M.output.set(ns_o.toString(), ns_o[1])
        done
    done

    // BIG BUG THAT NEEDS FIXING !
    // adding the states that have no transition coming towards them
    // therefore not present in ns_o_set
    ns_o_set.add([mealy.initial_state,initial_output])
    M.output.set(M.initial_state,initial_output)

    // construction of new states of the Moore machine
    foreach n in ns_o_set do
         M.states.add(n.toString())
    done

    let new_transitions := new Map()

    // now we add the new transitions
    foreach c in ns_o_set do
        foreach a in M.input_alphabet do
            var next_c := mealy.next(c[0], a)
            new_transitions.set([ c.toString() , a ], next_c.toString() )
        done
    done

    M.transition := new_transitions

    return M

end function

/*
 from automaton2json   import object2mealymoore
from automaton2json   import object2mealy
from automaton2json   import object2moore
from MealyToMoore     import mealy2moore

let mooore := mealy2moore(
            object2mealy(
                {
                "states": ["q0","q1","q2"],
                "initialState": "q0",
                "inputAlph": ["0","1"],
                "outputAlph": ["0","1"],
                "transitions":[
                    ["q0","0","q1"],   ["q0","1","q2"],
                    ["q1","0","q1"],   ["q1","1","q2"],
                    ["q2","0","q1"],   ["q2","1","q2"]
                ],
                "outputs":[
                    ["q0","0","0"],   ["q0","1","0"],
                    ["q1","0","0"],   ["q1","1","1"],
                    ["q2","0","1"],   ["q2","1","0"]
                ]
                }
            )
          )
console.log(mooore.states)
foreach x in mooore.transition do
    foreach y in x do
        console.log(y)
    done
done

 */
























