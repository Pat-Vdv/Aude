include determinization;
include minimization;

function automataAreEquivalent(A1, A2) {
  
  A1    = minimize(determinize(A1));
  A2    = minimize(determinize(A2));
  let trans1 = A1.getTransitionsTable(),
      trans2 = A2.getTransitionsTable();

  A1Seen : Set of States;
  A2Seen : Set of States;

  renamingFunction : Set of List; // [S1, S2] belongs to Renaming Function iff S1 in A1 is renamed to S2 in A2

  function visit(s1, s2) {
    if(A1Seen contains s1) {
      if(s2 !belongsTo A2Seen || [s1, s2] !belongsTo renamingFunction) {
      	return false;
      }
    }
    A1Seen.add(s1);
    A2Seen.add(s2);
    renamingFunction.add([s1, s2]);
    foreach(symbol in trans1[s1]) {
      if(!trans2[s2][symbol]) { // Transition s1 symbol q and no transition s2 symbol q, not equivalent
        return false;
      }
      else {
        if(trans1[s1][symbol].card() === trans2[s2][symbol].card()) { // If there is a destination state for the symbol for each state
          if(!visit(trans1[s1][symbol].getList()[0], symbol, visit(trans2[s2][symbol].getList()[0])) {
             // we visit (s1', s2') with
             //  - s1' the destination state of the transition in A1
             //  - s2' the destination state of the corresponding transition in A2
             return false;
          }
        }
      }
    }
    return true;
  }

  return visit(A1.getInitialState(), A2.getInitialState());
}
          
run(automataAreEquivalent, get_automaton(currentAutomaton), get_automaton(currentAutomaton+1));