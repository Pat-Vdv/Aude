function Monomial(symbols, state) {
   this.symbol = symbols;
   this.state = state;
}

Monomial.prototype.toString = function () {
   return '' + this.symbol + this.state;
}

// a line of equation is a state and a set of monome

function Equation(state, monomials) {
   this.state = state;
   this.monomials = monomials;
}

Equation.prototype.toString = function() {
   var res = this.state + ' = ';
   var plus = '';
   foreach(m in this.monomials) {
      if(plus) {
         res += ' + ';
      }
      else {
         plus = true;
      }

      res += m;
   }
   return res;
}

function automaton2regex(A) {
   sys : Set of Equation;
   t : Table = A.getTransitionsTable();

   foreach(state in A.getStates()) {
      e : Equation;

      e.state = state;
      for(let symbol in A.getAlphabet()) {
         foreach(dest in t[state][symbol]) {
             e.monomials.add(new Monomial(symbol, dest));
          }
      }
      sys.add(e);
   }
   return sys;
}

run(automaton2regex, get_automaton(currentAutomaton));