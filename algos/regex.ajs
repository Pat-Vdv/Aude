function Automata_OR(A1, A2) {
  orA : Automaton;

  finalStates : Set of List;
  
  foreach(state in A1.getStates()) {
    orA.addState([1, state]);
    if(A1.isFinalState(state)) {
      finalStates.add([1, state]);
    }
  }

  foreach(state in A2.getStates()) {
    orA.addState([2, state]);
    if(A2.isFinalState(state)) {
      finalStates.add([2, state]);
    }
  }

  orA.setInitialState("I");
  orA.addFinalState("F");
  foreach(f in finalStates) {
    orA.addTransition(f, epsilon, "F");
  }

  orA.addTransition("I", epsilon, [1, A1.getInitialState()]);
  orA.addTransition("I", epsilon, [2, A2.getInitialState()]);
  return orA;
}

function Automata_STAR(A) {
  starA       : Automaton;
  finalStates : Set of List;

  foreach(state in A.getStates()) {
    starA.addState([0, state]);
    if(A1.isFinalState(state)) {
      finalStates.add([0, state]);
    }

    starA.setInitialState("I");
    starA.addFinalState("F");

    foreach(f in finalStates) {
      starA.addTransition(f, epsilon, "F");
    }

    starA.addTransition("I", epsilon, "F");
    starA.addTransition("I", epsilon, [0, A.getInitialState()]);
  }
  return starA;
}

function Automata_CAT(A1, A2) {
  catA : Automaton;

  finalStates : Set of List;
  
  foreach(state in A1.getStates()) {
    catA.addState([1, state]);
    if(A1.isFinalState(state)) {
      finalStates.add([1, state]);
    }
  }

  foreach(state in A2.getStates()) {
    if(A2.isFinalState(state)) {
      catA.addFinalState([2, state]);
    }
    else {
      catA.addState([2, state]);
    }
  }
  
  foreach(f in finalStates) {
    catA.addTransition(f, epsilon, [2, A2.getInitialState()]);
  }

  catA.setInitialState([1, A1.getInitialState()])
  return catA;
}

function regularExpressionToAutomaton(regex, stop) {
  i             : Integer = 0;
  length        : Integer = regex.length;

  function error() {
    throw new Error("There is a syntax error in your regular expression on character " + i);
  }

  function validAutomaton(A) {
    if(!A) {
      error();
    }
  }

  function getSymbol() {
    if(i < length) {
      if(regex[i] === '\\') {
        ++i;
        if(getSymbol() === 'e') {
          return epsilon;
        }
        else {
          error();
        }
      }
      return regex[i++];
    }
    return '';
  }

  function parse(end) {
    let symbol = getSymbol();

    lastAutomaton : Automaton = null;
    while(i < regex.length) {
      switch(regex[i]) {
        case end:
          ++i;
          return lastAutomaton;
        case "(":
          ++i;
          lastAutomaton = parse(")");
          break;
        case "+":
          validAutomaton(lastAutomaton);
          lastAutomaton = Automata_OR(lastAutomaton, parse(end));
          break;
        case ".":
        case "Â·":
          lastAutomaton = 
          break;
        case "*":
          lastAutomaton = Automata_STAR(lastAutomaton);
        case "\\":
          break;
          ++i;
          if(regex[i] === 'e') {
          	error();
          }
          break;
        default:
          break;
      }
    }
    return lastAutomaton;
  }
  return parse();
}

run(regularExpressionToAutomaton, prompt("Enter the regular expression you want to get an automaton of"));
