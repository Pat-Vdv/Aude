from epsElimination import epsElim
from regex2automaton import regexToAutomaton
from linearGrammar2Automaton import linearGrammar2Automaton

export function emptyLanguage(A)
   # If the automaton doesn't recognize any word, return true. Otherwize, return false.

    A := epsElim(A)

    let visitedStates := {}

    function visit(state)
        if visitedStates contains state then
            return true
        end if

        if A.isAcceptingState(state) then
            return false
        end if

        visitedStates := visitedStates union {state}

        foreach symbol in trans(state) do
            foreach destinationState in trans(state, symbol) do
                if not visit(destinationState) then
                    return false
                end if
            done
        done
        return true
    end function


    let trans := A.getTransitionFunction()

    return visit(A.getInitialState())
end function

run(
    function()
        function accept(radioButton,regex,grammar,win)
            if radioButton[0].checked then # Automaton
                AudeGUI.Results.set(emptyLanguage(get_automaton(currentAutomaton)))
            else if radioButton[1].checked then
                AudeGUI.Results.set(emptyLanguage(regexToAutomaton(regex)))
            else if radioButton[2].checked then
                AudeGUI.Results.set(emptyLanguage(linearGrammar2Automaton(grammar)))
            end if
            win.close()
        end function

        AudeGUI.Results.drawSelectMode(accept)
    end function
)
