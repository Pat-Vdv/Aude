//Take an html Table and convert it into an automaton
export function HTMLTable2automaton (table)
    let A := new Automaton()
    console.log(table)
    //The inputs state
    let sta := table.getElementsByClassName("div-container-input-states")[0].childNodes
    //The inputs symbol
    let sym := table.getElementsByClassName("div-container-input-symbols")[0].childNodes

    let tabState := []
    let tabSymbol := []

    //Initialise states and initial states and final states
    foreach state in sta do
        tabState.push(String(/[^\*>-]/.exec(state.value)))
        if /\->[^\*>-]+\*/.test(state.value) then //Initial and final state
            A.addFinalState(String(/[^\*>-]/.exec(state.value)))
            A.setInitialState(String(/[^*>-]/.exec(state.value)))
        else if /\*/.test(state.value) then //Final state
            A.addFinalState(String(/[^\*>-]/.exec(state.value)))
        else if /->/.test(state.value) then //Initial state
            A.setInitialState(String(/[^*>-]/.exec(state.value)))
        else //Normal State
            A.addState(state.value)
        end if
    end for

    //Initialise alphabet
    for each c in sym do
        console.log(c.value)
        if String(c.value)="epsilon" or String(c.value)="\\e" then //To put epsilon
            console.log("epsilon")
            A.setAlphabet([epsilon])
            tabSymbol.push(epsilon)
        else
            A.setAlphabet(c.value)
            tabSymbol.push(c.value)
        end if
    end for
    //Initialise transition
    let trans := document.getElementsByClassName("div-container-input-transition")[0].childNodes

    let numCol := 0
    let numLine := 0
    let listSymbols := undefined
    let aLine := null
    foreach line in trans do
        aLine := line.childNodes //The list of input
        foreach cell in aLine do
            if cell.value.length>1 then
                listSymbols := cell.value.split(',')
            else if cell.value.length=0 then
                listSymbols := null
            else
                listSymbols := [cell.value]
            end if

            if listSymbols != undefined  then
                foreach cara in listSymbols do
                    A.addTransition(tabState[tabState.length-1-numCol],tabSymbol[numLine],cara)
                end for
            end if
            listSymbols := undefined
            numCol ++
        end for
        numLine ++
        numCol :=0
    end for

    //Print the response
    AudeGUI.Results.set(A)

end function

//Create a table into divAffi
function createTable (divAffi)
    divAffi.appendChild(libD.jso2dom([
                    ["div#div-container-table",[
                        ["button",{"class":"button-table-automaton"},("Add state")],
                        ["button",{"class":"button-table-automaton"},("Add symbol")],
                        ["button",{"class":"button-table-automaton"},("Remove state")],
                        ["button",{"class":"button-table-automaton"},("Remove symbol")],
                        ["button",{"class":"button-table-automaton"},("Create Automaton")],
                        ["button",{"class":"button-table-automaton"},("X")],
                        ["br"],
                        ["div#div-container-input-automaton",[
                            ["div",{"class":"div-container-input-states"}, [
                                ["input",{"type":"text","class":"cell-input-automaton"}],
                                ["input",{"type":"text","class":"cell-input-automaton"}],
                            ]],
                            ["div",{"class":"div-container-input-line2-automaton"},[
                                ["div",{"class":"div-container-input-symbols"},[
                                    ["input",{"type":"text","class":"cell-input-automaton"}],
                                    ["input",{"type":"text","class":"cell-input-automaton"}],
                                ]],
                                ["div",{"class":"div-container-input-transition"},[
                                    ["div",{"class":"div-container-input-line-automaton"},[
                                        ["input",{"type":"text","class":"cell-input-automaton"}],
                                        ["input",{"type":"text","class":"cell-input-automaton"}],
                                    ]],
                                    ["div",{"class":"div-container-input-line-automaton"},[
                                        ["input",{"type":"text","class":"cell-input-automaton"}],
                                        ["input",{"type":"text","class":"cell-input-automaton"}],
                                    ]],
                                ]],
                            ]],
                        ]],
                    ]],
                ]));


    document.getElementsByClassName("cell-input-automaton")[1].value:=("->1")
    document.getElementsByClassName("cell-input-automaton")[0].value:=("2")
    document.getElementsByClassName("cell-input-automaton")[2].value:=("a")
    document.getElementsByClassName("cell-input-automaton")[3].value:=("b")
    let buttons := document.getElementsByClassName("button-table-automaton")
    buttons[0].onclick:=addState
    buttons[1].onclick:=addSymbol
    buttons[2].onclick:=removeState
    buttons[3].onclick:=removeSymbol
    buttons[4].onclick:= HTMLTable2automaton.bind(null,document.getElementById("div-container-input-automaton"))
    //Remove the table
    buttons[5].onclick:= function() document.getElementById("div-container-table-absolute").parentNode.removeChild(document.getElementById("div-container-table-absolute")) end function
end function

//Add a new column
function addState ()
    let tabLine := document.getElementsByClassName("div-container-input-line-automaton") //Get all the line
    let tabStates := document.getElementsByClassName("div-container-input-states")
    foreach line in tabLine do
        line.appendChild(libD.jso2dom([
                ["input",{"type":"text","class":"cell-input-automaton"}]
                ]));
    end for
    tabStates[0].insertBefore((libD.jso2dom([
                ["input",{"type":"text","class":"cell-input-automaton"}]
                ])),tabStates[0].childNodes[0])
end function

//Remove the last column
function removeState ()
    let tabStates := document.getElementsByClassName("div-container-input-states")
    if tabStates[0].childNodes.length>1 then
        let tabLine := document.getElementsByClassName("div-container-input-line-automaton")
        foreach line in tabLine do
            line.removeChild(line.childNodes[line.childNodes.length-1])
        end for
        tabStates[0].removeChild(tabStates[0].childNodes[0])
    end if
end function

//Add a new line
function addSymbol ()
    let tabLine := document.getElementsByClassName("div-container-input-line-automaton")
    let nbColumn := tabLine[0].childNodes.length //Number of column to add

    //Add the line
    let tab := document.getElementsByClassName("div-container-input-transition")
    tab[0].appendChild(libD.jso2dom([
                ["div",{"class":"div-container-input-line-automaton"}]
                    ]));

    //Add a new cell in the symbols
    let tabSym := document.getElementsByClassName("div-container-input-symbols")
    tabSym[0].appendChild(libD.jso2dom([
                ["input",{"type":"text","class":"cell-input-automaton"}]
                    ]));

    //Add the column in the new line
    let line := document.getElementsByClassName("div-container-input-line-automaton")
    for i from 1 to nbColumn do
        line[line.length-1].appendChild(libD.jso2dom([
                ["input",{"type":"text","class":"cell-input-automaton"}]
                    ]));
    end for
end function

//Remove the last line
function removeSymbol ()
    let sym := document.getElementsByClassName("div-container-input-symbols")
    if sym[0].childNodes.length >1 then
        let trans := document.getElementsByClassName("div-container-input-transition") //Get the container
        trans[0].removeChild(trans[0].childNodes[trans[0].childNodes.length-1])
        sym[0].removeChild(sym[0].childNodes[sym[0].childNodes.length-1])
    end if
end function

run(
    function ()
        if document.getElementById("div-container-table-absolute")=undefined then
            let divBody := document.querySelectorAll("body")
            divBody[0].appendChild(libD.jso2dom([
                ["div#div-container-table-absolute"]
                ]));
            let div := document.getElementById("div-container-table-absolute")
            createTable(div)
        else
            return "You have already created a table, you can't create another one!"
        end if
    end function
)
