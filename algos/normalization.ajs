export function normalize(A, start)
   let normA   := new Automaton
   let map     := new Map
   let i       := start or 0;
   let qA_init := A.getInitialState()

   normA.setInitialState(i)

   if A.isFinalState(qA_init) then
      normA.setFinalState(i)
   end if

   map.set(qA_init, i)

   foreach state in A.getStates() \ {A.getInitialState()} do
      map.set(state, ++i)
      normA.addState(i, A.isFinalState(state))
   done

   normA.setAlphabet(A.getAlphabet())

   foreach t in A.getTransitions() do
      normA.addTransition(
          map.get(t.startState),
          t.symbol,
          map.get(t.endState)
      )
   done

   return normA
end function

run(normalize, get_automaton(currentAutomaton))
