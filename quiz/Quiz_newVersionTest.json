{
   "title": "Test des nouveaux quiz améliorés",
   "author": "Fabien Portas",
   "date": "8 juillet 2019",
   "description": "Ce quiz sert à tester la nouvelle version améliorée du moteur de quiz.",
   "questions": [{
         "type": "mcq",
         "instructionHTML": "Que vaut $\\emptyset^*$ ?",
         "possibilities": [{
               "id": "a",
               "html": "$\\left\\lbrace\\epsilon\\right\\rbrace$"
            },
            {
               "id": "b",
               "html": "$\\emptyset$"
            },
            {
               "id": "c",
               "html": "$\\Sigma^*$"
            },
            {
               "id": "d",
               "html": "Aucune de ces réponses"
            }
         ],
         "answers": ["a"],
         "singleChoice": true
      },
      {
         "type": "mcq",
         "instructionHTML": "Soit $\\Sigma = \\left\\lbrace a, b, c \\right\\rbrace$ . <br>Lesquelles des figures suivantes décrivent <b>entièrement</b> le langage des mots contenant un nombre pair de $a$",
         "possibilities": [{
            "id": "a",
            "automaton": {
               "states": ["0", "1"],
               "finalStates": ["0"],
               "transitions": [
                  ["0", "a", "1"],
                  ["1", "a", "0"],
                  ["1", "b", "1"],
                  ["1", "c", "1"]
               ]
            }
         }, {
            "id": "b",
            "html": "$L = \\left\\lbrace ((b + c)^* a (b + c)^*)^{2k}, k \\in \\mathbb{R} \\right\\rbrace$"
         }, {
            "id": "c",
            "regex": "((b+c)*a(b+c)*a(b+c)*)*"
         }, {
            "id": "d",
            "html": "",
            "grammar": "({a,b,c},{S,T},S,{S -> aT,S -> bS,S -> cS,S -> ε,T -> aS,T -> bT,T -> cT})"
         }],
         "answers": ["c", "d"]
      },
      {
         "instructionHTML": "Donnez une expression régulière reconnaissant au moins le mot \"aude\"",
         "type": "automatonEquiv",
         "usersAnswerType": "Regexp",
         "regexpAnswerConstraintsAudescript": ["let r := new Object();\nlet A := AutomatonPrograms.regexToAutomaton(re);\nif not A.acceptedWord(\"aude\") then\n\tr.correct := false;\n\tr.details := \"Ne reconnait pas le mot !\";\n\t return r;\n fi;\nr.correct := true;\nr.details := \"\";\n return r;"]
      }
   ]
}